'''
Created on Jun 30, 2011

@package: Newscoop
@copyright: 2011 Sourcefabric o.p.s.
@license: http://www.gnu.org/licenses/gpl-3.0.txt
@author: Gabriel Nistor

Provides renders implementations.
'''
from ally.core.api.type import List, TypeModel
from ally.core.spec.presenting import Encoder, Renders, Render
from ally.core.spec.resources import Path
from ally.core.impl.node import NodeModel
import logging
from inspect import isfunction, getargspec
import sys

# --------------------------------------------------------------------

log = logging.getLogger(__name__)

# --------------------------------------------------------------------

class OnFunction(Render):
    '''
    Renderer based on a function that will do the rendering work.
    '''

    def __init__(self, function):
        '''
        Constructs the on function rendering based on the provided function.
        
        @param function: function
            The function doing the rendering work.
        '''
        assert isfunction(function), 'Invalid function provided %s' % function
        self.function = function
        
    def render(self, obj, objType, encoder, renders):
        '''
        @see: Render.render
        '''
        return self.function(obj, objType, encoder, renders)

# --------------------------------------------------------------------

def forListPath(obj, objType, encoder, renders):
    '''
    Renders the List type that contains paths, usually this is generated by the root node in order to present the
    resources available.
    '''
    assert isinstance(encoder, Encoder)
    assert isinstance(renders, Renders)
    if isinstance(objType, List):
        assert isinstance(objType, List)
        if isinstance(objType.itemType, Path):
            encoder.open('Resources')
            for path in obj:
                assert isinstance(path, Path), 'Invalid path %s' % path
                node = path.node
                if isinstance(node, NodeModel):
                    assert isinstance(node, NodeModel)
                    encoder.put(node.model.name, None, path)
            encoder.close()
            return True
    return False

# --------------------------------------------------------------------

def __renders():
    '''
    FOR INTERNAL USE ONLY.
    Provides the renders constructed based on specific functions in this module.
    '''
    renders = []
    module = sys.modules[__name__]
    for name in dir(module):
        func = module.__dict__[name]
        if isfunction(func) and func.__name__.startswith('for') and len(getargspec(func).args) == 4:
            renders.append(OnFunction(func))
            log.info('Added renderer for function %s', func.__name__)
    return renders

# Contains all the renders to be used for encoding
RENDERS = __renders()

# --------------------------------------------------------------------
