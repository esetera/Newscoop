'''
Created on Jun 30, 2011

@package: Newscoop
@copyright: 2011 Sourcefabric o.p.s.
@license: http://www.gnu.org/licenses/gpl-3.0.txt
@author: Gabriel Nistor

Provides renders implementations.
'''

from ally.core.api.operator import Model, Property
from ally.core.api.type import Iter, TypeProperty, TypeId, TypeModel, \
    typeFor
from ally.core.impl.node import NodeModel
from ally.core.spec.presenting import Encoder, Renders, Render
from ally.core.spec.resources import Path, ResourcesManager
import logging

# --------------------------------------------------------------------

log = logging.getLogger(__name__)

# --------------------------------------------------------------------

class RenderListPath(Render):
    '''
    Renders the List type that contains paths, usually this is generated by the root node in order to present the
    resources available.
    '''
    
    tagResources = 'Resources'
    # The tag to be used as the main container for the resources.
        
    def render(self, obj, objType, encoder, renders):
        '''
        @see: Render.render
        '''
        assert isinstance(encoder, Encoder)
        assert isinstance(renders, Renders)
        if isinstance(objType, Iter):
            assert isinstance(objType, Iter)
            if objType.forClass() == Path:
                encoder.open(self.tagResources)
                for path in obj:
                    assert isinstance(path, Path), 'Invalid path %s' % path
                    node = path.node
                    if isinstance(node, NodeModel):
                        assert isinstance(node, NodeModel)
                        encoder.put(node.model.name, path=path)
                encoder.close()
                return True
        return False

class RenderListIds(Render):
    '''
    Renders the List type that contains model id's.
    '''
    
    resourcesManager = ResourcesManager
    # The resources manager used in locating the resource nodes for the id's presented.
    tagListSufix = 'List'
    # Will be appended at the end of the model name when rendering the list tag containing the list items.
        
    def render(self, obj, objType, encoder, renders):
        '''
        @see: Render.render
        '''
        assert isinstance(encoder, Encoder)
        assert isinstance(renders, Renders)
        if isinstance(objType, Iter):
            assert isinstance(objType, Iter)
            if isinstance(objType.itemType, TypeProperty):
                typeProp = objType.itemType
                assert isinstance(typeProp, TypeProperty)
                if not isinstance(typeProp.property.type, TypeId):
                    return False
                encoder.open(typeProp.model.name + self.tagListSufix)
                name = typeProp.model.name + typeProp.property.name
                path = self.resourcesManager.findShortPath(typeFor(typeProp.model.modelClass), typeProp)
                for id in obj:
                    if path is None:
                        encoder.put(name, id, typeProp)
                    else:
                        assert isinstance(path, Path)
                        path.update(id, typeProp)
                        encoder.put(name, id, typeProp, path)
                encoder.close()
                return True
        return False
    
class RenderListModels(Render):
    '''
    Renders the List type that contains Model's.
    '''
    tagListSufix = 'List'
    # Will be appended at the end of the model name when rendering the list tag containing the list items.
        
    def render(self, obj, objType, encoder, renders):
        '''
        @see: Render.render
        '''
        assert isinstance(encoder, Encoder)
        assert isinstance(renders, Renders)
        if isinstance(objType, Iter):
            assert isinstance(objType, Iter)
            if isinstance(objType.itemType, TypeModel):
                typeModel = objType.itemType
                assert isinstance(typeModel, TypeModel)
                encoder.open(typeModel.model.name + self.tagListSufix)
                for model in obj:
                    renders.render(model, typeModel, encoder)
                encoder.close()
                return True
        return False

class RenderModel(Render):
    '''
    Renders the Model type that.
    '''
    
    resourcesManager = ResourcesManager
    # The resources manager used in locating the resource nodes for the id's presented.
        
    def render(self, obj, objType, encoder, renders):
        '''
        @see: Render.render
        '''
        assert isinstance(encoder, Encoder)
        assert isinstance(renders, Renders)
        if isinstance(objType, TypeModel):
            assert isinstance(objType, TypeModel)
            model = objType.model
            assert isinstance(model, Model)
            encoder.open(model.name)
            for prop in model.properties.values():
                assert isinstance(prop, Property)
                value = prop.get(obj)
                if value is not None:
                    encoder.put(prop.name, value, prop.type)
            encoder.close()
            return True
        return False
